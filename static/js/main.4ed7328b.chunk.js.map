{"version":3,"sources":["components/customers/customers.js","components/Message.js","components/ProjectApi.js","components/Hem.js","components/AxiosApi.js","components/view.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Customers","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","customers","_this2","fetch","then","res","json","setState","console","log","react_default","a","createElement","className","map","customer","key","id","firstName","lastName","Component","Message","_ref","class","SendingUserId","RecievingUserId","ServiceTitle","Message1","App","data","catch","components_Message","Header","AxiosImages","props","imageURL","axios","get","response","message","error","src","alt","href","View","react_router_dom","react_router","exact","path","component","ProjectApi","Hem","AxiosApi","view","header","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ed7328b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './customers.css';\r\n/* Nedan presenteras mitt egna API från servern i server.js-filen som körs tillsammans med projektet tack vare \"run dev kommandot, servern på localhost 5000 och klienten på 3000, allt i samma projekt\" Det är Express som gör detta möjligt. */\r\nclass Customers extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            customers:[]\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch('/api/customers')\r\n        .then(res=>res.json())\r\n        .then(customers=> this.setState({customers}, ()=> console.log('Customers fetched..',\r\n        customers)));\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <span className=\"center\">\r\n     <center><h2>Egen API med JS Express</h2></center>\r\n     <br></br>\r\n     <center> <ul>\r\n            {this.state.customers.map(customer=>\r\n                <li key={customer.id}>{customer.firstName} {customer.lastName}</li>\r\n                )}\r\n      </ul></center>\r\n    </span>\r\n  );\r\n        \r\n}\r\n}\r\n\r\n\r\nexport default Customers;\r\n","import React from 'react'\r\n/* Plockar in servicen från grupp 5, eftersom \"kund\" aldrig har skrivit något så ser vi bara svaret från säljaren i kommentarsfältet, dessutom finns bara \"ID\" som namn i databasen. Till alla element finns även CSS */\r\n    const Message = ({ Message }) => {\r\n      return (\r\n        <div>\r\n        <h1 className=\"center3\">Meddelandeservice Grupp 5</h1>\r\n        {Message.map((Message) => (\r\n            <div>\r\n              <div className=\"card-body\">\r\n              <p class=\"service-card-description\">From : {Message.SendingUserId}</p>\r\n                <p class=\"service-card-description\">To : {Message.RecievingUserId}</p>\r\n                <h3 className=\"card-header\">{Message.ServiceTitle}</h3>\r\n                <h4 className=\"card-response\">{Message.Message1}</h4>\r\n                \r\n\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )\r\n    };\r\n\r\n    export default Message","import React, { Component } from 'react';\r\nimport Message from './Message';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    Message: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('http://193.10.202.82/MessageRestApi/Message')\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      this.setState({ Message: data })\r\n    })\r\n    .catch(console.log)\r\n  }\r\n  render() {\r\n    return (\r\n      <Message Message={this.state.Message} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","import React from 'react'\r\n\r\nfunction Header() {\r\nreturn(\r\n    <div> \r\n    <h1 className=\"center3\">Välkomstsida</h1>\r\n  </div>\r\n\r\n)\r\n}\r\n\r\nexport default Header\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass AxiosImages extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          imageURL: '',\r\n        }\r\n      }\r\n      componentDidMount() {\r\n        axios.get('https://dog.ceo/api/breeds/image/random')  /* Ett Axios API på hundar */\r\n        .then(response => {\r\n          this.setState({ imageURL: response.data.message });\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n      }\r\n      render() {\r\n          \r\n        const { imageURL } = this.state;\r\n        return (\r\n            \r\n            <div className=\"center\">\r\n                <center><h2>API med Axios</h2></center>\r\n          <img src={imageURL} alt=\"hundar\" />\r\n          <br></br>\r\n          <a href=\"/AxiosApi\">Ny hund</a>\r\n          </div>\r\n          \r\n        );\r\n      }\r\n  }\r\n\r\nexport default AxiosImages","import React, { Component } from 'react'\r\nimport Customers from './customers/customers'\r\nimport ProjectApi from './ProjectApi'\r\nimport Hem from './Hem'\r\nimport AxiosApi from './AxiosApi'\r\nimport { BrowserRouter, Route, Switch} from 'react-router-dom';\r\nclass View extends Component {\r\n/* Här plockar vi in allt vi vill visa i \"hem-vyn\" istället för att allt presenteras på en gång. */\r\n    \r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n            <div>\r\n              <Switch>\r\n              <Route exact path=\"/Customers\" component={Customers}/>\r\n              <Route exact path=\"/ProjectApi\" component={ProjectApi}/>\r\n              <Route exact path=\"/Hem\" component={Hem}/>\r\n              <Route exact path=\"/AxiosApi\" component={AxiosApi}/>\r\n              </Switch>\r\n            </div>\r\n            </BrowserRouter> \r\n  );\r\n        \r\n}\r\n}\r\n\r\n\r\nexport default View\r\n","import React from 'react'\r\nfunction Header() {\r\nreturn(\r\n    <span className=\"container center2\"> \r\n    {/* Länkar till alla componenter */}\r\n  <div>\r\n  \r\n    <a href=\"/Hem\">Hem</a>\r\n    <br></br>\r\n    <a href=\"/customers\">Egen API</a>\r\n    \r\n    <a href=\"/ProjectApi\">Project Api</a>\r\n    \r\n    <a href=\"/AxiosApi\">Axios Api</a>\r\n\r\n  </div>\r\n</span>\r\n)\r\n}\r\n\r\nexport default Header\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport View from './components/view'\r\nimport Header from './components/header'\r\n/* I \"app-vyn\" sker inte så mycket, vi anropar bara de komponenter som skall ropas på, komponenterna i sig innehåller all nödvändig information. */\r\nfunction App() {\r\n  return (\r\n    <div>\r\n    \r\n      \r\n        <View />\r\n        <Header />\r\n    \r\n\r\n      \r\n   \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}